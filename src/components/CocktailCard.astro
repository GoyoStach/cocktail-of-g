---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';

interface Props {
	cocktail: CollectionEntry<'cocktails'>;
}

const { cocktail } = Astro.props;
const { title, description, heroImage, ingredients } = cocktail.data;
---

<article
	class='group relative overflow-hidden rounded-2xl bg-white shadow-lg transition-all duration-300 hover:-translate-y-2 hover:shadow-2xl'
>
	<a href={`/cocktails/${cocktail.id}`} class='block'>
		<div class='relative h-64 overflow-hidden'>
			{
				heroImage && (
					<Image
						width={400}
						height={300}
						src={heroImage}
						alt={title}
						class='h-full w-full object-contain transition-transform duration-300 group-hover:scale-110'
						transition:name={`cocktail-${title.replace(/\W/g, '')}`}
					/>
				)
			}
			<div
				class='absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100'
			>
			</div>
			<div class='absolute top-4 right-4'>
				<div
					class='flex h-8 w-8 items-center justify-center rounded-full bg-white/20 backdrop-blur-sm'
				>
					<svg class='h-4 w-4 text-white' fill='currentColor' viewBox='0 0 20 20'>
						<path
							d='M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z'
						></path>
					</svg>
				</div>
			</div>
		</div>

		<div class='p-6'>
			<div class='mb-3'>
				<h3
					class='text-xl font-bold text-slate-900 transition-colors duration-200 group-hover:text-orange-600'
				>
					{title}
				</h3>
				<p class='mt-1 line-clamp-2 text-sm text-slate-600'>
					{description}
				</p>
			</div>

			<div class='mb-4'>
				<p class='mb-2 text-xs font-medium tracking-wide text-slate-500 uppercase'>
					Ingredients ({ingredients.length})
				</p>
				<div class='flex flex-wrap gap-1'>
					{
						ingredients
							.slice(0, 3)
							.map((ingredient) => (
								<span class='inline-block rounded-full bg-orange-100 px-2 py-1 text-xs font-medium text-orange-800'>
									{ingredient.name}
								</span>
							))
					}
					{
						ingredients.length > 3 && (
							<span class='inline-block rounded-full bg-slate-100 px-2 py-1 text-xs font-medium text-slate-600'>
								+{ingredients.length - 3} more
							</span>
						)
					}
				</div>
			</div>

			<div class='flex items-center justify-between'>
				<div class='flex items-center gap-1 text-xs text-slate-500'>
					<svg class='h-3 w-3' fill='currentColor' viewBox='0 0 20 20'>
						<path
							fill-rule='evenodd'
							d='M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z'
							clip-rule='evenodd'></path>
					</svg>
					<span>5 min</span>
				</div>

				<div
					class='flex items-center gap-1 text-sm font-medium text-orange-600 transition-all duration-200 group-hover:gap-2'
				>
					<span>View Recipe</span>
					<svg
						class='h-4 w-4 transition-transform duration-200 group-hover:translate-x-1'
						fill='none'
						stroke='currentColor'
						viewBox='0 0 24 24'
					>
						<path
							stroke-linecap='round'
							stroke-linejoin='round'
							stroke-width='2'
							d='M9 5l7 7-7 7'></path>
					</svg>
				</div>
			</div>
		</div>
	</a>
</article>
